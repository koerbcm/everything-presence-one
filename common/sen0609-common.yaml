binary_sensor:
  - platform: gpio
    name: "${friendly_name}: mmWave"
    id: ${id_prefix}_mmwave"
    device_class: occupancy
    pin:
      number: GPIO17
      mode: INPUT_PULLDOWN

uart:
  id: uart_bus
  tx_pin: GPIO14
  rx_pin: GPIO13
  baud_rate: 9600
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\n"
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);

light:
  - platform: binary
    name: "${friendly_name}: mmWave LED"
    restore_mode: RESTORE_DEFAULT_OFF
    output: mmwave_led_output
    entity_category: config
    disabled_by_default: False

output:
  - platform: template
    id: "${friendly_name}: mmwave_led_output"
    type: binary
    write_action:
      - switch.turn_off: "${id_prefix}_mmwave_sensor"
      - delay: 1s
      - if:
          condition:
            lambda: !lambda return state;
          then:
            - uart.write: "setLedMode 1 0"
          else:
            - uart.write: "setLedMode 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: "${id_prefix}_mmwave_sensor"

switch:
  - platform: template
    name: "${friendly_name}: mmWave sensor"
    id: "${id_prefix}_mmwave_sensor"
    disabled_by_default: True
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - uart.write: "sensorStart"
      - delay: 1s
    turn_off_action:
      - uart.write: "sensorStop"
      - delay: 1s

  - platform: template
    name: "${friendly_name}: UART presence output"
    id: "${id_prefix}_uart_presence_output"
    entity_category: config
    disabled_by_default: true
    optimistic: true
    turn_on_action:
      - switch.turn_off: "${id_prefix}_mmwave_sensor"
      - delay: 1s
      - uart.write: "setUartOutput 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: "${id_prefix}_mmwave_sensor"
    turn_off_action:
      - switch.turn_off: "${id_prefix}_mmwave_sensor"
      - delay: 1s
      - uart.write: "setUartOutput 1 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: "${id_prefix}_mmwave_sensor"

  - platform: template
    name: "${friendly_name}: UART target output"
    id: "${id_prefix}_uart_target_output"
    entity_category: config
    disabled_by_default: true
    optimistic: true
    assumed_state: false
    turn_on_action:
      - switch.turn_off: "${id_prefix}_mmwave_sensor"
      - delay: 1s
      - uart.write: "setUartOutput 2 1 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: "${id_prefix}_mmwave_sensor"
    turn_off_action:
      - switch.turn_off: "${id_prefix}_mmwave_sensor"
      - delay: 1s
      - uart.write: "setUartOutput 2 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: "${id_prefix}_mmwave_sensor"

number:
  - platform: template
    id: "${id_prefix}_mmwave_distance_min"
    name: "${friendly_name}: mmWave Minimum Distance"
    icon: mdi:arrow-left-right
    entity_category: config
    min_value: 0
    max_value: 25
    initial_value: 0
    optimistic: true
    step: 0.1
    restore_value: true
    unit_of_measurement: m
    mode: slider
  - platform: template
    id: "${id_prefix}_mmwave_distance_max"
    name: "${friendly_name}: mmWave Max Distance"
    icon: mdi:arrow-left-right
    entity_category: config
    min_value: 0
    max_value: 25
    initial_value: 12
    optimistic: true
    step: 0.1
    restore_value: true
    unit_of_measurement: m
    mode: slider
  - platform: template
    id: "${id_prefix}_mmwave_range_reduced"
    name: "${friendly_name}: mmWave Range Reduced"
    icon: mdi:arrow-left-right
    entity_category: config
    min_value: 0
    max_value: 25
    initial_value: 0.8
    optimistic: true
    step: 0.1
    restore_value: true
    unit_of_measurement: m
    mode: slider
    set_action:
      - switch.turn_off: "${id_prefix}_mmwave_sensor"
      - delay: 1s
      - uart.write: !lambda
          std::string ms = "setRangeReduced " + to_string(x);
          return std::vector<unsigned char>(ms.begin(), ms.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: "${id_prefix}_mmwave_sensor"

  - platform: template
    name: "${friendly_name}: mmWave off latency"
    icon: mdi:clock-end
    entity_category: config
    id: "${id_prefix}_mmwave_off_latency"
    min_value: 1
    max_value: 600
    initial_value: 15
    optimistic: true
    step: 5
    restore_value: true
    unit_of_measurement: seconds
    mode: slider
    set_action:
      - switch.turn_off: "${id_prefix}_mmwave_sensor"
      - delay: 1s
      - uart.write: !lambda |-
          std::string mss = "setLatency " + to_string(id(${id_prefix}_mmwave_on_latency).state) + " " + to_string(id(${id_prefix}_mmwave_off_latency).state);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: "${id_prefix}_mmwave_sensor"

  - platform: template
    name: "${friendly_name}: mmWave on latency"
    icon: mdi:clock-start
    id: "${id_prefix}_mmwave_on_latency"
    entity_category: config
    min_value: 0
    max_value: 2
    initial_value: 0
    optimistic: true
    step: 0.25
    restore_value: true
    unit_of_measurement: seconds
    mode: slider
    set_action:
      - switch.turn_off: "${id_prefix}_mmwave_sensor"
      - delay: 1s
      - uart.write: !lambda |-
          std::string mss = "setLatency " + to_string(id(mmwave_on_latency).state) + " " + to_string(id(mmwave_off_latency).state);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: "${id_prefix}_mmwave_sensor"

  - platform: template
    name: "${friendly_name}: mmWave Sustain Sensitivity"
    icon: mdi:target-variant
    id: "${id_prefix}_mmwave_sensitivity"
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 7
    optimistic: true
    step: 1
    restore_value: true

  - platform: template
    name: "${friendly_name}: mmWave Trigger Sensitivity"
    icon: mdi:target-variant
    id: "${id_prefix}_mmwave_trigger_sensitivity"
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 5
    optimistic: true
    step: 1
    restore_value: true

button:
  - platform: template
    name: "${friendly_name}: Set Distance"
    id: "${id_prefix}_set_distance"
    entity_category: config
    on_press:
      - switch.turn_off: "${id_prefix}_mmwave_sensor"
      - delay: 1s
      - uart.write: !lambda
          std::string ms = "setRange " + to_string(id(${id_prefix}_mmwave_distance_min).state) + " " + to_string(id(${id_prefix}_mmwave_distance_max).state);
          return std::vector<unsigned char>(ms.begin(), ms.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: "${id_prefix}_mmwave_sensor"

  - platform: template
    name: "${friendly_name}: Set Sensitivity"
    id: "${id_prefix}_set_sensitivity"
    entity_category: config
    on_press:
      - switch.turn_off: "${id_prefix}_mmwave_sensor"
      - delay: 1s
      - uart.write:
          !lambda std::string mss = "setSensitivity " + to_string(id(${id_prefix}_mmwave_sensitivity).state) + " " + to_string(id(${id_prefix}_mmwave_trigger_sensitivity).state);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: "${id_prefix}_mmwave_sensor"

  - platform: template
    name: "${friendly_name}: Restart mmWave Sensor"
    id: "${id_prefix}_restart_mmwave"
    entity_category: config
    internal: true
    on_press:
      - uart.write: "resetSystem"
  - platform: template
    name: "${friendly_name}: Factory Reset mmWave"
    icon: mdi:cog-counterclockwise
    id: "${id_prefix}_factory_reset_mmwave"
    disabled_by_default: true
    entity_category: config
    on_press:
      - switch.turn_off: "${id_prefix}_mmwave_sensor"
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: "${id_prefix}_mmwave_sensor"
