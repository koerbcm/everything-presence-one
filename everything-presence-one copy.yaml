# substitutions:
#   name: "everything-presence-one"
#   id_prefix: ""
#   friendly_name: "Everything Presence One"
#   project_name: "Everything Smart Technology.Everything Presence One"
#   project_version: "1.2.3"
#   temperature_offset: "-3"
#   humidity_offset: "5"
#   temperature_update_interval: "60s"
#   illuminance_update_interval: "2s"
#   hidden_ssid: "false"
#   factory_reset_disabled: "true"
#   uart_target_output_disabled: "true"
#   uart_presence_output_disabled: "true"
#   log_level: "ERROR"

# dashboard_import:
#   package_import_url: github://everythingsmarthome/everything-presence-one/everything-presence-one.yaml@main
#   import_full_config: false

# light:
#   - platform: status_led
#     name: ESP32 status LED
#     pin: GPIO32
#     entity_category: config
#     disabled_by_default: True
#   - platform: binary
#     name: mmWave LED
#     restore_mode: RESTORE_DEFAULT_OFF
#     output: "${id_prefix}_mmwave_led"
#     entity_category: config
#     disabled_by_default: True

# output:
#   - platform: template
#     name: "${friendly_name}: mmWave LED"
#     id: "${id_prefix}_mmwave_led"
#     type: binary
#     write_action:
#       - switch.turn_off: "${id_prefix}_mmwave_sensor"
#       - delay: 1s
#       - if:
#           condition:
#             lambda: !lambda return state;
#           then:
#             - uart.write: "setLedMode 1 0"
#           else:
#             - uart.write: "setLedMode 1 1"
#       - delay: 1s
#       - uart.write: "saveConfig"
#       - delay: 3s
#       - switch.turn_on: "${id_prefix}_mmwave_sensor"

# i2c:
#   sda: 26
#   scl: 25
#   scan: true

# sensor:
#   - platform: shtcx
#     temperature:
#       name: "${friendly_name}: Temperature"
#       id: "${id_prefix}_temperature"
#       icon: mdi:thermometer
#       device_class: "temperature"
#       filters:
#         offset: ${temperature_offset}
#     humidity:
#       name: "${friendly_name}: Humidity"
#       id: "${id_prefix}_humidity"
#       icon: mdi:water-percent
#       device_class: "humidity"
#       filters:
#         offset: ${humidity_offset}
#     address: 0x70
#     update_interval: ${temperature_update_interval}
#   - platform: bh1750
#     name: "${friendly_name}: Illuminance"
#     id: "${id_prefix}_illuminance"
#     icon: mdi:brightness-5
#     device_class: "illuminance"
#     address: 0x23
#     update_interval: ${illuminance_update_interval}

# binary_sensor:
#   - platform: gpio
#     name: "${friendly_name}: mmWave"
#     id: "${id_prefix}_mmwave"
#     icon: mdi:motion-sensor
#     device_class: occupancy
#     pin:
#       number: GPIO15
#       mode: INPUT_PULLDOWN
#   - platform: gpio
#     pin:
#       number: 33
#       mode: INPUT_PULLDOWN
#     name: "${friendly_name}: PIR"
#     id: "${id_prefix}_motion"
#     icon: mdi:motion-sensor
#     device_class: motion
#     filters:
#       - delayed_off: ${pir_delay_off}
#   - platform: template
#     name: "${friendly_name}: Occupancy"
#     id: "${id_prefix}_occupancy"
#     icon: mdi:home-outline
#     device_class: occupancy
#     filters:
#       - delayed_off: ${occupancy_delay_off}
#     lambda: |-
#       if ( id(${id_prefix}_mmwave).state or id(${id_prefix}_motion).state) {
#         return true;
#       }
#       else if (id(${id_prefix}_mmwave).state == 0 and id(${id_prefix}_motion).state == 0) {
#         return false;
#       }
#       else {
#         return id(${id_prefix}_occupancy).state;
#       }
# uart:
#   id: uart_bus
#   tx_pin: GPIO13
#   rx_pin: GPIO14
#   baud_rate: 115200
#   debug:
#     direction: BOTH
#     dummy_receiver: true
#     after:
#       delimiter: "\n"
#     sequence:
#       - lambda: UARTDebug::log_string(direction, bytes);

# switch:
#   - platform: template
#     name: "${friendly_name}: mmWave Sensor"
#     id: "${id_prefix}_mmwave_sensor"
#     disabled_by_default: True
#     entity_category: config
#     optimistic: true
#     restore_mode: RESTORE_DEFAULT_ON
#     turn_on_action:
#       - uart.write: "sensorStart"
#       - delay: 1s
#     turn_off_action:
#       - uart.write: "sensorStop"
#       - delay: 1s


#   - platform: template
#     name: UART presence output
#     id: "${id_prefix}_uart_presence_output"
#     entity_category: config
#     internal: ${uart_presence_output_disabled}
#     optimistic: true
#     turn_on_action:
#       - switch.turn_off: "${id_prefix}_mmwave_sensor"
#       - delay: 1s
#       - uart.write: "setUartOutput 1 1"
#       - delay: 1s
#       - uart.write: "saveConfig"
#       - delay: 3s
#       - switch.turn_on: "${id_prefix}_mmwave_sensor"
#     turn_off_action:
#       - switch.turn_off: "${id_prefix}_mmwave_sensor"
#       - delay: 1s
#       - uart.write: "setUartOutput 1 0"
#       - delay: 1s
#       - uart.write: "saveConfig"
#       - delay: 3s
#       - switch.turn_on: "${id_prefix}_mmwave_sensor"

#   - platform: template
#     name: UART target output
#     id: "${id_prefix}_uart_target_output"
#     entity_category: config
#     internal: ${uart_target_output_disabled}
#     optimistic: true
#     assumed_state: false
#     turn_on_action:
#       - switch.turn_off: "${id_prefix}_mmwave_sensor"
#       - delay: 1s
#       - uart.write: "setUartOutput 2 1 1 1"
#       - delay: 1s
#       - uart.write: "saveConfig"
#       - delay: 3s
#       - switch.turn_on: "${id_prefix}_mmwave_sensor"
#     turn_off_action:
#       - switch.turn_off: "${id_prefix}_mmwave_sensor"
#       - delay: 1s
#       - uart.write: "setUartOutput 2 0"
#       - delay: 1s
#       - uart.write: "saveConfig"
#       - delay: 3s
#       - switch.turn_on: "${id_prefix}_mmwave_sensor"

# number:
#   - platform: template
#     name: "${friendly_name}: mmWave Distance"
#     id: "${id_prefix}_mmwave_distance"
#     icon: mdi:arrow-left-right
#     entity_category: config
#     min_value: 0
#     max_value: 800
#     initial_value: 315
#     optimistic: true
#     step: 15
#     restore_value: true
#     unit_of_measurement: cm
#     mode: slider
#     set_action:
#       - switch.turn_off: "${id_prefix}_mmwave_sensor"
#       - delay: 1s
#       - uart.write: !lambda int cm = (int)ceil(x / 15.0);
#           std::string cms = "detRangeCfg -1 0 " + to_string(cm);
#           return std::vector<unsigned char>(cms.begin(), cms.end());
#       - delay: 1s
#       - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
#       - delay: 1s
#       - switch.turn_on: "${id_prefix}_mmwave_sensor"

#   - platform: template
#     name: "${friendly_name}: mmWave Off Latency"
#     id: "${id_prefix}_mmwave_off_latency"
#     icon: mdi:clock-end
#     entity_category: config
#     min_value: 1
#     max_value: 60
#     initial_value: 15
#     optimistic: true
#     step: 1
#     restore_value: true
#     unit_of_measurement: seconds
#     mode: slider
#     set_action:
#       - switch.turn_off: "${id_prefix}_mmwave_sensor"
#       - delay: 1s
#       - uart.write: !lambda |-
#           std::string mss = "setLatency " + to_string(id(${id_prefix}_mmwave_on_latency).state) + " " + to_string(id(${id_prefix}_mmwave_off_latency).state);
#           return std::vector<unsigned char>(mss.begin(), mss.end());
#       - delay: 1s
#       - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
#       - delay: 1s
#       - switch.turn_on: "${id_prefix}_mmwave_sensor"

#   - platform: template
#     name: "${friendly_name}: mmWave On Latency"
#     id: "${id_prefix}_mmwave_on_latency"
#     icon: mdi:clock-start
#     entity_category: config
#     min_value: 0
#     max_value: 60
#     initial_value: 0
#     optimistic: true
#     step: 0.5
#     restore_value: true
#     unit_of_measurement: seconds
#     mode: slider
#     set_action:
#       - switch.turn_off: "${id_prefix}_mmwave_sensor"
#       - delay: 1s
#       - uart.write: !lambda |-
#           std::string mss = "setLatency " + to_string(id(${id_prefix}_mmwave_on_latency).state) + " " + to_string(id(${id_prefix}_mmwave_off_latency).state);
#           return std::vector<unsigned char>(mss.begin(), mss.end());
#       - delay: 1s
#       - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
#       - delay: 1s
#       - switch.turn_on: "${id_prefix}_mmwave_sensor"

#   - platform: template
#     name: "${friendly_name}: mmWave Sensitivity"
#     id: "${id_prefix}_mmwave_sensitivity"
#     icon: mdi:target-variant
#     entity_category: config
#     min_value: 0
#     max_value: 9
#     initial_value: 7
#     optimistic: true
#     step: 1
#     restore_value: true
#     set_action:
#       - switch.turn_off: "${id_prefix}_mmwave_sensor"
#       - delay: 1s
#       - uart.write:
#           !lambda std::string mss = "setSensitivity " + to_string((int)x);
#           return std::vector<unsigned char>(mss.begin(), mss.end());
#       - delay: 1s
#       - uart.write: "saveConfig"
#       - delay: 1s
#       - switch.turn_on: "${id_prefix}_mmwave_sensor"

# button:
#   - platform: restart
#     name: Restart_internal
#     id: "${id_prefix}_restart_internal"
#     entity_category: config
#     internal: true
#   - platform: template
#     name: "Restart mmWave Sensor"
#     id: "${id_prefix}_restart_mmwave"
#     entity_category: config
#     internal: true
#     on_press:
#       - uart.write: "resetSystem"
#   - platform: template
#     name: "${friendly_name}: Restart Device"
#     id: "${id_prefix}_restart_device"
#     icon: mdi:restart
#     entity_category: config
#     disabled_by_default: True
#     on_press:
#       - button.press: "${id_prefix}_restart_mmwave"
#       - button.press: "${id_prefix}_restart_internal"
#   - platform: safe_mode
#     internal: false
#     name: "${friendly_name}: Safe Mode"
#     id: "${id_prefix}_safe_mode"
#     entity_category: config
#     disabled_by_default: True
#   - platform: template
#     name: "${friendly_name}: Factory Reset mmWave"
#     id: "${id_prefix}_factory_reset_mmwave"
#     icon: mdi:cog-counterclockwise
#     internal: ${factory_reset_disabled}
#     entity_category: config
#     on_press:
#       - switch.turn_off: "${id_prefix}_mmwave_sensor"
#       - delay: 1s
#       - uart.write: "resetCfg"
#       - delay: 3s
#       - switch.turn_on: "${id_prefix}_mmwave_sensor"
